name: Dotnet - Publish

on:
  workflow_call:
    inputs:
      package_to_publish:
        required: true
        type: string
        description: "The package to publish"
      package_version:
        required: true
        type: string
        description: "The package version to use"
      publish_to_public_registry:
        required: false
        type: boolean
        description: "Whether to publish to the public registry"
        default: true
      environment_name:
        required: false
        type: string
        description: "The environment name to use"
        default: main
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: read
    environment: ${{ inputs.environment_name }}
    env:
      VAULT_ADDR: ${{ vars.VAULT_URL }}
      VAULT_GITHUB_ACTIONS_ROLE: ${{ vars.VAULT_GITHUB_ACTIONS_ROLE }}
      AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID || vars.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ inputs.AWS_REGION || vars.AWS_REGION }}
      CODEARTIFACT_DOMAIN: smartway
      CODEARTIFACT_REPOSITORY: nuget-release
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github_oidc

      - name: Tailscale
        if: inputs.publish_to_public_registry
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: ${{ vars.TAILSCALE_VERSION }}

      - name: Check DNS Resolution for Vault
        if: inputs.publish_to_public_registry
        shell: bash
        run: |
          extract_domain() {
            echo "$1" | awk -F[/:] '{print $4}'
          }

          VAULT_DOMAIN=$(extract_domain "${{ env.VAULT_ADDR }}")

          for i in {1..100}; do
            if nslookup $VAULT_DOMAIN; then
              echo "DNS resolution successful"
              break
            else
              echo "DNS resolution failed, retrying in 10 seconds..."
              sleep 15
            fi
          done
          # Exit with error if DNS resolution fails after retries
          if ! nslookup $VAULT_DOMAIN; then
            echo "DNS resolution failed after multiple attempts"
            exit 1
          fi

      - name: Import Secrets
        if: inputs.publish_to_public_registry
        id: secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ env.VAULT_ADDR }}
          role: ${{ env.VAULT_GITHUB_ACTIONS_ROLE }}
          method: jwt
          path: "github-actions"
          exportToken: true
          secrets: |
            secret/data/github-actions-common/nuget-registry api-key | NUGET_PUBLIC_API_KEY;

      - name: Login to CodeArtifact
        run: "aws codeartifact login --tool dotnet --repository ${CODEARTIFACT_REPOSITORY} --domain ${CODEARTIFACT_DOMAIN} --domain-owner ${AWS_ACCOUNT_ID} --region ${AWS_REGION}"

      - name: Login to Github Packages
        run: >-
          dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          --name github
          --username ${{ github.actor }}
          --password ${{ secrets.GITHUB_TOKEN }}
          --store-password-in-clear-text

      - name: Download NuGet package
        run: >-
          dotnet add package ${{ inputs.package_to_publish }} 
          --version ${{ inputs.package_version }} 
          --package-directory .
          --source github
          --no-restore

      - name: Publish package to AWS
        run: >-
          dotnet nuget push ${{ inputs.package_to_publish }}.${{ inputs.package_version }}/${{ inputs.package_to_publish }}.${{ inputs.package_version }}.nupkg
          --source https://${{ env.CODEARTIFACT_DOMAIN }}-${{ env.AWS_ACCOUNT_ID }}.d.codeartifact.${{ env.AWS_REGION }}.amazonaws.com/nuget/${{ env.CODEARTIFACT_REPOSITORY }}/v3/index.json
          --skip-duplicate

      - name: Publish package to Public Registry
        if: inputs.publish_to_public_registry
        run: >-
          dotnet nuget push ${{ inputs.package_to_publish }}.${{ inputs.package_version }}/${{ inputs.package_to_publish }}.${{ inputs.package_version }}.nupkg
          --source https://api.nuget.org/v3/index.json
          --skip-duplicate
          --api-key ${{ steps.secrets.outputs.NUGET_PUBLIC_API_KEY }}
