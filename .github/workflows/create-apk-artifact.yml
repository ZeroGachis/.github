name: "Create Apk Artifact"

on:
  workflow_call:
    inputs:
      node-version:
        required: true
        type: string
      java-version:
        required: true
        type: string
      configuration:
        required: true
        type: string
      package-name:
        required: true
        type: string
      version-code:
        required: true
        type: string
      vault-url:
        required: false
        type: string
      vault_github_actions_role:
        required: false
        type: string
      vault-path:
        required: true
        type: string
      aws_account_id:
        required: false
        type: string
      aws_region:
        required: false
        type: string
      aws_github_role_name:
        required: false
        type: string
        default: "github_oidc_readonly"
      s3-path:
        required: true
        type: string
      working-directory:
        default: .
        type: string
      is-library-package:
        default: false
        type: boolean
      environment:
        required: true
        type: string
    outputs:
      apk-name:
        description: "Apk name"
        value: app-${{ inputs.configuration }}.apk
      apk-version:
        description: "Apk version"
        value: ${{ jobs.create-apk.outputs.apk-version }}
      apk-artifact-name:
        description: "Apk artifact name"
        value: Apk-${{ inputs.configuration }}
      is-new-apk-version:
        description: "Indicate if a new apk version was built"
        value: ${{ jobs.create-apk.outputs.is-new-apk-version }}

jobs:
  create-apk:
    permissions:
      contents: read
      id-token: write
      packages: read
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      apk-version: ${{ steps.get-apk-version.outputs.apk-version }}
      is-new-apk-version: ${{ steps.get-existing-apk.outputs.need-new-apk}}
    env:
      smartway_keystore_name: smartway.keystore
      apk_name: app-${{ inputs.configuration }}.apk
      VAULT_ADDR: ${{ inputs.VAULT_URL || vars.VAULT_URL || vars.PULLREQUEST_VAULT_URL }}
      VAULT_GITHUB_ACTIONS_ROLE: ${{ inputs.vault_github_actions_role || vars.VAULT_GITHUB_ACTIONS_ROLE }}
      AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID || vars.AWS_ACCOUNT_ID || vars.PULL_REQUEST_AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ inputs.AWS_REGION || vars.AWS_REGION || vars.AWS_DEFAULT_REGION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          use-cache: true
          version: ${{ vars.TAILSCALE_VERSION }}

      - name: Check DNS Resolution for Vault
        run: |
          extract_domain() {
            echo "$1" | awk -F[/:] '{print $4}'
          }

          VAULT_DOMAIN=$(extract_domain "${{ env.VAULT_ADDR }}")

          for i in {1..100}; do
            if nslookup $VAULT_DOMAIN; then
              echo "DNS resolution successful"
              break
            else
              echo "DNS resolution failed, retrying in 10 seconds..."
              sleep 15
            fi
          done
          # Exit with error if DNS resolution fails after retries
          if ! nslookup $VAULT_DOMAIN; then
            echo "DNS resolution failed after multiple attempts"
            exit 1
          fi
        shell: bash

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ env.VAULT_ADDR }}
          role: ${{ env.VAULT_GITHUB_ACTIONS_ROLE }}
          method: jwt
          path: "github-actions"
          exportToken: true
          secrets: |
            secret/data/smartapp/keystore KEYSTORE_PASSWORD | SMARTWAY_KEYSTORE_PASSWORD ;
            secret/data/smartapp/keystore KEYSTORE_PASSWORD | SMARTWAY_KEY_PASSWORD ;
            secret/data/smartapp/keystore KEY_ALIAS | SMARTWAY_KEY_ALIAS ;
            secret/data/smartapp/datadog DATADOG_CLIENT_TOKEN | DATADOG_CLIENT_TOKEN ;
            secret/data/smartapp/datadog DATADOG_APPLICATION_ID | DATADOG_APPLICATION_ID ;
            secret/data/smartapp/datadog DATADOG_API_REVERSEPROXY | DATADOG_API_REVERSEPROXY ;
            secret/data/${{ inputs.vault-path }} CODE_PUSH_KEY | CODE_PUSH_KEY ;
            secret/data/${{ inputs.vault-path }} CODE_PUSH_SERVER_URL | CODE_PUSH_SERVER_URL ;
            secret/data/${{ inputs.vault-path }} QA_CODE_PUSH_KEY | QA_CODE_PUSH_KEY ;
            secret/data/${{ inputs.vault-path }} S3_APP_BUCKET | S3_APP_BUCKET ;
            secret/data/smartapp/keystore S3_BUCKET | KEYSTORE_BUCKET_S3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ inputs.aws_github_role_name }}

      - name: Get APK version
        id: get-apk-version
        run: |
          echo "apk-version=$(grep -oP "versionName \"\K[^\"]*" android/app/build.gradle)" >> $GITHUB_OUTPUT

      - name: Get existing APK
        if: ${{ inputs.environment != 'pullrequest' }}
        id: get-existing-apk
        run: |
          aws s3 cp s3://${{ steps.secrets.outputs.S3_APP_BUCKET }}/${{ inputs.s3-path }}/${{ steps.get-apk-version.outputs.apk-version }}/${{ env.apk_name }} android/app/build/outputs/apk/${{ inputs.configuration }}/${{ env.apk_name }} && {
            echo "Apk already exist for that version"
            echo "need-new-apk=false" >> $GITHUB_OUTPUT
          } || {
            echo "Apk does not exist for that version, need build a new one"
            echo "need-new-apk=true" >> $GITHUB_OUTPUT
          }

      - uses: actions/setup-java@v5
        if: ${{steps.get-existing-apk.outputs.need-new-apk == 'true' }} or ${{ inputs.environment == 'pullrequest' }}
        with:
          distribution: "temurin"
          java-version: ${{ inputs.java-version }}
          cache: "gradle"

      - name: Validate Gradle wrapper
        if: ${{steps.get-existing-apk.outputs.need-new-apk == 'true' }} or ${{ inputs.environment == 'pullrequest' }}
        uses: gradle/wrapper-validation-action@v3

      - uses: actions/setup-node@v4
        if: ${{steps.get-existing-apk.outputs.need-new-apk == 'true' }} or ${{ inputs.environment == 'pullrequest' }}
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: "https://npm.pkg.github.com"
          scope: "@ZeroGachis"
          cache: "npm"

      - name: Get Smartway APK keystore
        if: ${{steps.get-existing-apk.outputs.need-new-apk == 'true'}} or ${{ inputs.environment == 'pullrequest' }}
        run: aws s3 cp s3://${{ steps.secrets.outputs.KEYSTORE_BUCKET_S3 }}/github-actions/${{ env.smartway_keystore_name }} android/app/${{ env.smartway_keystore_name }}

      - name: Update android versions
        if: ${{steps.get-existing-apk.outputs.need-new-apk == 'true'}} or ${{ inputs.environment == 'pullrequest' }}
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: 'versionCode ([\d]+)'
          replacement: "versionCode ${{ inputs.version-code }}"
          include: "^android/app/build.gradle"

      - name: Modify Android applicationId
        if: ${{steps.get-existing-apk.outputs.need-new-apk == 'true'}} or ${{ inputs.environment == 'pullrequest' }}
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: 'applicationId "([\w\.]+)"'
          replacement: 'applicationId "${{ inputs.package-name }}"'
          include: "^android/app/build.gradle"

      - name: Set code push server URL in string.xml
        if: ${{ inputs.environment != 'pullrequest' }}
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: '<string moduleConfig="true" name="CodePushServerUrl">(.*)</string>'
          replacement: '<string moduleConfig="true" name="CodePushServerUrl">${{ steps.secrets.outputs.CODE_PUSH_SERVER_URL }}</string>'
          include: "^android/app/src/main/res/values/strings.xml"

      - name: Set code push key in string.xml
        if: ${{ inputs.environment != 'pullrequest' }}
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: '<string moduleConfig="true" name="CodePushDeploymentKey">(.*)</string>'
          replacement: '<string moduleConfig="true" name="CodePushDeploymentKey">${{ steps.secrets.outputs.CODE_PUSH_KEY }}</string>'
          include: "^android/app/src/main/res/values/strings.xml"

      - name: Set code push key when sync manually
        if: ${{ inputs.environment != 'pullrequest' }}
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: "'CODE_PUSH_KEY'"
          replacement: "'${{ steps.secrets.outputs.CODE_PUSH_KEY }}'"
          include: "^src/"

      - name: Set code push key when sync manually for QA env
        if: ${{ inputs.environment != 'pullrequest' }}
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: "'QA_CODE_PUSH_KEY'"
          replacement: "'${{ steps.secrets.outputs.QA_CODE_PUSH_KEY }}'"
          include: "^src/"

      - name: Install lib dependencies
        if: ${{ inputs.is-library-package == true && steps.get-existing-apk.outputs.need-new-apk == 'true' }}
        working-directory: .
        run: npm ci --ignore-scripts

      - name: Install dependencies
        if: ${{steps.get-existing-apk.outputs.need-new-apk == 'true'}} or ${{ inputs.environment == 'pullrequest' }}
        run: npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Inject environment in .env file
        if: ${{steps.get-existing-apk.outputs.need-new-apk == 'true'}} or ${{ inputs.environment == 'pullrequest' }}
        run: |
          echo "DATADOG_CLIENT_TOKEN=${{ steps.secrets.outputs.DATADOG_CLIENT_TOKEN }}" >> .env
          echo "DATADOG_APPLICATION_ID=${{ steps.secrets.outputs.DATADOG_APPLICATION_ID }}" >> .env
          echo "DATADOG_API_REVERSEPROXY=${{ steps.secrets.outputs.DATADOG_API_REVERSEPROXY }}" >> .env
          echo "ENVIRONMENT=${{ inputs.environment }}" >> .env

      - name: Cache Gradle Wrapper
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches
          restore-keys: |
            ${{ runner.os }}-gradle-caches

      - name: Build Apk
        if: ${{steps.get-existing-apk.outputs.need-new-apk == 'true'}} or ${{ inputs.environment == 'pullrequest' }}
        working-directory: ${{ inputs.working-directory }}/android/
        run: chmod +x ./gradlew && ./gradlew assemble${{ inputs.configuration }}
        env:
          SMARTWAY_KEYSTORE_NAME: ${{ env.smartway_keystore_name }}

      - name: Upload Apk
        uses: actions/upload-artifact@v4
        with:
          name: Apk-${{ inputs.configuration }}
          path: ${{ inputs.working-directory }}/android/app/build/outputs/apk/${{ inputs.configuration }}/${{ env.apk_name }}
