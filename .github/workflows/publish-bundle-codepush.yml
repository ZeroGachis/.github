name: "Publish Bundle to CodePush"

on:
  workflow_call:
    inputs:
      node-version:
        required: true
        type: string
      codepush-app:
        required: true
        type: string
      apk-version:
        required: true
        type: string
      is-library-package:
        default: false
        type: boolean
      is-qa-package:
        default: false
        type: boolean
      working-directory:
        default: .
        type: string
      vault-path:
        required: true
        type: string
      vault-url:
        required: false
        type: string
      vault_github_actions_role:
        required: false
        type: string
      environment_name:
        required: false
        type: string

jobs:
  bundle-js:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_name }}
    permissions:
      contents: read
      id-token: write
      packages: read
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    env:
      VAULT_URL: ${{ inputs.VAULT_URL || vars.VAULT_URL || vars.PULLREQUEST_VAULT_URL }}
      VAULT_GITHUB_ACTIONS_ROLE: ${{ inputs.vault_github_actions_role || vars.VAULT_GITHUB_ACTIONS_ROLE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: ${{ vars.TAILSCALE_VERSION }}

      - name: Import Secrets
        uses: Wandalen/wretry.action@v3
        id: secrets
        with:
          action: hashicorp/vault-action@v3
          attempt_limit: 3
          attempt_delay: 100
          with: |
            url: ${{ env.VAULT_URL }}
            role: ${{ env.VAULT_GITHUB_ACTIONS_ROLE }}
            method: jwt
            path: "github-actions"
            exportToken: true
            secrets: |
              secret/data/${{ inputs.vault-path }} CODE_PUSH_KEY_NAME | CODE_PUSH_KEY_NAME ;
              secret/data/${{ inputs.vault-path }} QA_CODE_PUSH_KEY_NAME | QA_CODE_PUSH_KEY_NAME ;
              secret/data/${{ inputs.vault-path }} CODE_PUSH_TOKEN | CODE_PUSH_TOKEN ;

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: "https://npm.pkg.github.com"
          scope: "@ZeroGachis"

      - name: Install lib dependencies
        if: ${{ inputs.is-library-package == true }}
        working-directory: .
        run: npm ci --ignore-scripts

      - name: Install dependencies
        run: npm ci --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rebuild & Prepare dependencies
        run: npm rebuild && npm run prepare --if-present

      - name: Install App center
        run: npm install -g appcenter-cli

      - name: App center login
        run: appcenter login --token ${{fromJSON( steps.secrets.outputs.outputs ).CODE_PUSH_TOKEN}}

      - name: Format Target binary version
        id: target-binary-version
        run: echo "value=\"$(echo ${{ inputs.apk-version }} | grep -oP "^\K[^\.]*").X.X\"" >> $GITHUB_OUTPUT

      - name: Determine CodePush key
        id: code-push-key
        run: |
          if [[ "${{ inputs.is-qa-package }}" == "false" ]]
          then
            echo "value=${{fromJSON( steps.secrets.outputs.outputs ).CODE_PUSH_KEY_NAME}}" >> $GITHUB_OUTPUT
          else
            echo "value=${{fromJSON( steps.secrets.outputs.outputs ).QA_CODE_PUSH_KEY_NAME}}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy code push
        run: |
          appcenter codepush release-react -a ${{ inputs.codepush-app }} -d ${{ steps.code-push-key.outputs.value }} -t ${{ steps.target-binary-version.outputs.value }} -m || {
            if [[ $? -eq 3 ]] ; then
              echo "Code push deploy skipped."
              exit 0
            fi

            exit $?
          }
