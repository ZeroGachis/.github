name: ArgoCD Sync

on:
  workflow_call:
    inputs:
      argocd_server:
        required: false
        type: string
      environment_name:
        required: false
        type: string
      app_name:
        required: true
        type: string
      vault_url:
        required: false
        type: string
      vault_github_actions_role:
        required: false
        type: string

jobs:
  argocd_sync:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_name }}
    env:
      VAULT_ADDR: ${{ inputs.vault_url || vars.VAULT_URL || vars.PULLREQUEST_VAULT_URL }}
      VAULT_GITHUB_ACTIONS_ROLE: ${{ inputs.vault_github_actions_role || vars.VAULT_GITHUB_ACTIONS_ROLE }}
      ARGOCD_SERVER: ${{ inputs.argocd_server || vars.ARGOCD_SERVER }}
    steps:
      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: ${{ vars.TAILSCALE_VERSION }}

      - name: Check DNS Resolution
        run: |
          for i in {1..10}; do
            if nslookup ${{ env.ARGOCD_SERVER }}; then
              echo "DNS resolution successful"
              break
            else
              echo "DNS resolution failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          # Exit with error if DNS resolution fails after retries
          if ! nslookup ${{ env.ARGOCD_SERVER }}; then
            echo "DNS resolution failed after multiple attempts"
            exit 1
          fi
        shell: bash

      - name: ArgoCD Secrets
        id: argocd_secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ env.VAULT_ADDR }}
          role: ${{ env.VAULT_GITHUB_ACTIONS_ROLE }}
          method: jwt
          path: "github-actions"
          exportToken: true
          secrets: |
            secret/data/github-actions-common/argocd apikey | ARGOCD_AUTH_TOKEN;

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install ArgoCD CLI
        run: /home/linuxbrew/.linuxbrew/bin/brew install argocd

      - name: Sync ArgoCD App
        run: |
          argocd --grpc-web --server ${{ vars.ARGOCD_SERVER }} --auth-token ${{ steps.argocd_secrets.outputs.ARGOCD_AUTH_TOKEN }} app sync ${{ inputs.app_name }}
          argocd --grpc-web --server ${{ vars.ARGOCD_SERVER }} --auth-token ${{ steps.argocd_secrets.outputs.ARGOCD_AUTH_TOKEN }} app wait ${{ inputs.app_name }}
