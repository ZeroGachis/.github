name: "Run-Python"

on:
  workflow_call:
    inputs:
      python_version:
        required: false
        type: string
        default: "3.x"
      environment_name:
        required: false
        type: string
        default: ""
      vault_enabled:
        required: false
        type: boolean
        default: true
      vault_url:
        required: false
        type: string
      vault_github_actions_role:
        required: true
        type: string
      vault_secrets:
        required: true
        type: string
      tailscale_enabled:
        required: false
        type: boolean
        default: true
      run_command:
        required: true
        type: string
      aws_credentials_enabled:
        required: false
        type: boolean
        default: false
      aws_account_id:
        required: false
        type: string
      aws_region:
        required: false
        type: string
      aws_github_role_name:
        required: false
        type: string
        default: "github_oidc_readonly"
      enable_test_report:
        required: false
        type: boolean
        default: false
      test_report_name:
        required: false
        type: string
      test_report_path:
        required: false
        type: string
      test_report_format:
        required: false
        type: string

jobs:
  run-python:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: read
      checks: write
    environment:
      name: ${{ inputs.environment_name }}
    env:
      VAULT_ADDR: ${{ inputs.VAULT_URL || vars.VAULT_URL || vars.PULLREQUEST_VAULT_URL }}
      VAULT_GITHUB_ACTIONS_ROLE: ${{ inputs.vault_github_actions_role || vars.VAULT_GITHUB_ACTIONS_ROLE }}
      AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID || vars.AWS_ACCOUNT_ID || vars.PULL_REQUEST_AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ inputs.AWS_REGION || vars.AWS_REGION || vars.AWS_DEFAULT_REGION }}

    steps:
      - name: Tailscale
        if: inputs.tailscale_enabled || inputs.vault_enabled
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          use-cache: true
          version: ${{ vars.TAILSCALE_VERSION }}

      - name: Check DNS Resolution for Vault
        if: inputs.vault_enabled
        run: |
          extract_domain() {
            echo "$1" | awk -F[/:] '{print $4}'
          }

          VAULT_DOMAIN=$(extract_domain "${{ env.VAULT_ADDR }}")

          for i in {1..100}; do
            if nslookup $VAULT_DOMAIN; then
              echo "DNS resolution successful"
              break
            else
              echo "DNS resolution failed, retrying in 10 seconds..."
              sleep 15
            fi
          done
          # Exit with error if DNS resolution fails after retries
          if ! nslookup $VAULT_DOMAIN; then
            echo "DNS resolution failed after multiple attempts"
            exit 1
          fi
        shell: bash

      - name: Import Secrets
        id: secrets
        if: inputs.vault_enabled
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ env.VAULT_ADDR }}
          role: ${{ env.VAULT_GITHUB_ACTIONS_ROLE }}
          method: jwt
          path: "github-actions"
          exportToken: true
          secrets: |
            ${{ inputs.vault_secrets }}

      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python_version }}

      - name: Configure AWS Credentials
        if: inputs.aws_credentials_enabled
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ inputs.aws_github_role_name }}

      - name: run-command
        run: ${{ inputs.run_command }}

      - name: Test Report
        uses: dorny/test-reporter@v2.1.1
        id: test-report
        if: ${{ always() && inputs.enable_test_report == true }}
        with:
          name: "${{ inputs.test_report_name }}"
          path: ${{ inputs.test_report_path }}
          reporter: ${{ inputs.test_report_format }}
          max-annotations: 0
          list-tests: "failed"
