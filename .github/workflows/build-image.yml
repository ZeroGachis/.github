name: "BuildImage"

on:
  workflow_call:
    inputs:
      working-directory:
        required: false
        type: string
      dockerfile_context:
        required: true
        type: string
      file:
        required: false
        type: string
        default: Dockerfile
      regitry_url:
        required: true
        type: string
      regitry_username:
        required: false
        type: string
      regitry_password:
        required: false
        type: string
      image_name:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      image_target:
        required: false
        type: string
      build-args:
        required: false
        type: string
      build-secrets:
        required: false
        type: string
      tailscale_enabled:
        required: false
        type: boolean
        default: true
      vault_enabled:
        required: false
        type: boolean
        default: true
      vault_url:
        required: false
        type: string
      vault_github_actions_role:
        required: false
        type: string
      environment_name:
        required: false
        type: string
      linter_tool:
        required: false
        type: string
        default: hadolint
      linter_filter_mode:
        required: false
        type: string
        default: added
      linter_fail_level:
        required: false
        type: string
        default: error
      security_scan_failed_build:
        required: false
        type: boolean
        default: false
      security_scan_output_format:
        required: false
        type: string
        default: sarif
      trivy_exit-code:
        required: false
        type: string
        default: "0"
      trivy_severity:
        required: false
        type: string
        default: "CRITICAL,HIGH"
    outputs:
      image-url:
        value: ${{ jobs.build-image.outputs.image-url }}
      image-version:
        value: ${{ jobs.build-image.outputs.image-version }}

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      checks: write
      contents: read
      id-token: write
      packages: write
      pull-requests: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    environment:
      name: ${{ inputs.environment_name }}
    env:
      VAULT_ADDR: ${{ inputs.VAULT_URL || vars.VAULT_URL || vars.PULLREQUEST_VAULT_URL }}
      VAULT_GITHUB_ACTIONS_ROLE: ${{ inputs.vault_github_actions_role || vars.VAULT_GITHUB_ACTIONS_ROLE }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID || vars.PULL_REQUEST_AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION || vars.AWS_DEFAULT_REGION }}
    outputs:
      image-url: ${{ steps.meta.outputs.tags }}
      image-version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Tailscale
        if: inputs.tailscale_enabled || inputs.vault_enabled
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          use-cache: true
          version: ${{ vars.TAILSCALE_VERSION }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Check DNS Resolution for Vault
        if: inputs.vault_enabled
        run: |
          extract_domain() {
            echo "$1" | awk -F[/:] '{print $4}'
          }

          VAULT_DOMAIN=$(extract_domain "${{ env.VAULT_ADDR }}")

          for i in {1..100}; do
            if nslookup $VAULT_DOMAIN; then
              echo "DNS resolution successful"
              break
            else
              echo "DNS resolution failed, retrying in 10 seconds..."
              sleep 15
            fi
          done
          # Exit with error if DNS resolution fails after retries
          if ! nslookup $VAULT_DOMAIN; then
            echo "DNS resolution failed after multiple attempts"
            exit 1
          fi
        shell: bash

      - name: Import Secrets
        if: inputs.vault_enabled
        id: secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ env.VAULT_ADDR }}
          role: ${{ env.VAULT_GITHUB_ACTIONS_ROLE }}
          method: jwt
          path: "github-actions"
          exportToken: true
          secrets: |
            github/token/read_repositories token | GH_ORG_READ_REPO_TOKEN ;

      - name: Configure AWS Credentials
        id: aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-3
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github_oidc_readonly
          output-credentials: true

      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.regitry_url }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "007065811408"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.regitry_url }}/${{ github.repository_owner	 }}/${{ inputs.image_name }}
          labels: |
            org.opencontainers.image.source=github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          flavor: |
            latest=false

      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@v0.2.3
        with:
          cache: true
          version: v0.60.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lint Dockerfile - Trivy
        if: inputs.linter_tool == 'trivy'
        uses: reviewdog/action-trivy@v1
        with:
          trivy_command: config
          trivy_target: ${{ inputs.dockerfile_context }}/${{ inputs.file }}
          reporter: github-pr-check
          filter_mode: ${{ inputs.linter_filter_mode }}
          fail_level: ${{ inputs.linter_fail_level }}
          level: info

      - name: Lint Dockerfile - Hadolint
        if: inputs.linter_tool == 'hadolint'
        uses: reviewdog/action-hadolint@v1
        with:
          reporter: github-pr-check
          filter_mode: ${{ inputs.linter_filter_mode }}
          fail_level: ${{ inputs.linter_fail_level }}
          hadolint_ignore: DL3002 DL3008

      - name: Build
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ inputs.dockerfile_context }}
          file: ${{ inputs.dockerfile_context }}/${{ inputs.file }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ${{ inputs.image_target }}
          build-args: |
            ${{ inputs.build-args }}
            GITHUB_USER=oauth2
            GITHUB_TOKEN=${{ inputs.vault_enabled && steps.secrets.outputs.GH_ORG_READ_REPO_TOKEN }}
            AWS_ACCESS_KEY_ID=${{ steps.aws.outputs.aws-access-key-id }}
            AWS_SECRET_ACCESS_KEY=${{ steps.aws.outputs.aws-secret-access-key }}
            AWS_SESSION_TOKEN=${{ steps.aws.outputs.aws-session-token }}
            CODEARTIFACT_DOMAIN=smartway
            CODEARTIFACT_DOMAINOWNER=007065811408
          secrets: |
            ${{ inputs.build-secrets }}
            aws-key-id=${{ steps.aws.outputs.aws-access-key-id }}
            aws-secret-key=${{ steps.aws.outputs.aws-secret-access-key }}
            aws-session-token=${{ steps.aws.outputs.aws-session-token }}
            github-token=${{ inputs.vault_enabled && steps.secrets.outputs.GH_ORG_READ_REPO_TOKEN }}
            GIT_AUTH_TOKEN=${{ inputs.vault_enabled && steps.secrets.outputs.GH_ORG_READ_REPO_TOKEN }}

      - name: Run Trivy vulnerability scanner
        if: inputs.security_scan_output_format != 'sarif'
        id: trivy-scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          skip-setup-trivy: true
          image-ref: ${{ steps.meta.outputs.tags }}
          format: "table"
          exit-code: ${{ inputs.trivy_exit-code }}
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: ${{ inputs.trivy_severity }}
        env:
          TRIVY_DISABLE_VEX_NOTICE: true

      - name: Run Trivy vulnerability scanner sarif
        if: inputs.security_scan_output_format == 'sarif'
        id: trivy-scan-sarif
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: ${{ inputs.trivy_exit-code }}
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: ${{ inputs.trivy_severity }}
        env:
          TRIVY_DISABLE_VEX_NOTICE: true

      - name: Upload Trivy Sarif result
        if: inputs.security_scan_output_format == 'sarif'
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: "trivy-results.sarif"
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: Trivy

      - name: Trivy vulnerability block Critical
        id: trivy-scan-block-critical
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          # with format:table there is a bug, Trivy keeps format:sarif from previous run
          # so we use format:json to avoid having the issue
          format: "json"
          exit-code: 1
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
        env:
          TRIVY_DISABLE_VEX_NOTICE: true
