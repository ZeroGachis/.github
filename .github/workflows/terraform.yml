name: "Terraform"

on:
  workflow_call:
    inputs:
      workdir:
        required: false
        type: string
        default: ${{ github.workspace }}
      terraform_check_only:
        required: false
        type: boolean
        default: true
      environment_name:
        required: false
        type: string
      terraform_workspace:
        required: false
        type: string
        default: ${{ github.ref_name }}
      terraform_parallelism:
        required: false
        type: string
        default: "10"
      terraform_backend:
        required: false
        type: string
      terraform_args:
        required: false
        type: string
      aws_account_id:
        required: false
        type: string
      aws_region:
        required: false
        type: string
      aws_github_role_name:
        required: false
        type: string
        default: "github_oidc_readonly"
      vault_enabled:
        required: false
        type: boolean
        default: true
      vault_url:
        required: false
        type: string
      vault_github_actions_role:
        required: false
        type: string
      vault_secrets:
        required: false
        type: string
      aws_secrets:
        required: false
        type: string
      aws_additional_secrets:
        required: false
        type: string
      tailscale_enabled:
        required: false
        type: boolean
        default: true
      infracost_enabled:
        required: false
        type: boolean
        default: true
      argocd_enabled:
        required: false
        type: boolean
        default: false
      argocd_server:
        required: false
        type: string
      infracost_terraform_workspace:
        type: string
        default: "develop,main"
jobs:
  terraform:
    name: "Terraform"
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_name }}
    env:
      VAULT_ADDR: ${{ inputs.VAULT_URL || vars.VAULT_URL || vars.PULLREQUEST_VAULT_URL }}
      VAULT_GITHUB_ACTIONS_ROLE: ${{ inputs.vault_github_actions_role || vars.VAULT_GITHUB_ACTIONS_ROLE }}
      AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID || vars.AWS_ACCOUNT_ID || vars.PULL_REQUEST_AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ inputs.AWS_REGION || vars.AWS_REGION || vars.AWS_DEFAULT_REGION }}
      ARGOCD_SERVER: ${{ inputs.argocd_server || vars.ARGOCD_SERVER }}
      AWS_DEFAULT_SECRETS: |
        DD_API_KEY,datadog/${{ inputs.AWS_ACCOUNT_ID || vars.AWS_ACCOUNT_ID || vars.PULL_REQUEST_AWS_ACCOUNT_ID }}/technical-account/api-key
        DD_APP_KEY,datadog/${{ inputs.AWS_ACCOUNT_ID || vars.AWS_ACCOUNT_ID || vars.PULL_REQUEST_AWS_ACCOUNT_ID }}/technical-account/app-key
      TERRAFORM_DEFAULT_BACKEND: tfstate-${{ inputs.AWS_ACCOUNT_ID || vars.AWS_ACCOUNT_ID || vars.PULL_REQUEST_AWS_ACCOUNT_ID }}

    steps:
      - name: Tailscale
        if: inputs.tailscale_enabled || inputs.vault_enabled
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: ${{ vars.TAILSCALE_VERSION }}

      - name: Check DNS Resolution
        if: inputs.argocd_enabled
        run: |
          for i in {1..10}; do
            if nslookup ${{ env.ARGOCD_SERVER }}; then
              echo "DNS resolution successful"
              break
            else
              echo "DNS resolution failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          # Exit with error if DNS resolution fails after retries
          if ! nslookup ${{ env.ARGOCD_SERVER }}; then
            echo "DNS resolution failed after multiple attempts"
            exit 1
          fi
        shell: bash

      - name: Import Secrets
        uses: Wandalen/wretry.action@v3
        if: inputs.vault_enabled
        id: secrets
        with:
          action: hashicorp/vault-action@v3
          attempt_limit: 15
          attempt_delay: 500
          with: |
            url: ${{ env.VAULT_ADDR }}
            role: ${{ env.VAULT_GITHUB_ACTIONS_ROLE }}
            method: jwt
            path: "github-actions"
            exportToken: true
            secrets: |
              github/token/read_repositories token | GITHUB_READ_REPO_TOKEN;
              ${{ inputs.vault_secrets }}

      - name: ArgoCD Secrets
        uses: Wandalen/wretry.action@v3
        if: inputs.argocd_enabled && inputs.vault_enabled
        id: argocd_secrets
        with:
          action: hashicorp/vault-action@v3
          attempt_limit: 15
          attempt_delay: 500
          with: |
            url: ${{ env.VAULT_ADDR }}
            role: ${{ env.VAULT_GITHUB_ACTIONS_ROLE }}
            method: jwt
            path: "github-actions"
            exportToken: true
            secrets: |
              secret/data/github-actions-common/argocd apikey | ARGOCD_AUTH_TOKEN;

      - uses: hashicorp/setup-terraform@v3

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ inputs.aws_github_role_name }}

      - name: Get tiers Tools credentials
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ${{ inputs.aws_secrets || env.AWS_DEFAULT_SECRETS }}
            ${{ inputs.aws_additional_secrets }}

      - name: Login to Github for private module
        if: inputs.vault_enabled
        run: |
          git config --global url."https://oauth2:${{ fromJSON( steps.secrets.outputs.outputs ).GITHUB_READ_REPO_TOKEN }}@github.com/ZeroGachis".insteadOf "https://github.com/ZeroGachis"
          git config --global url."https://${{ fromJSON( steps.secrets.outputs.outputs ).GITHUB_READ_REPO_TOKEN }}:x-oauth-basic@github.com/ZeroGachis".insteadOf ssh://git@github.com/ZeroGachis
        shell: sh

      - name: Terraform Format
        id: fmt
        working-directory: ${{ inputs.workdir || github.workspace	}}
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.workdir || github.workspace	}}
        run: terraform init -backend-config="bucket=${{ inputs.terraform_backend || env.TERRAFORM_DEFAULT_BACKEND }}"

      - name: Terraform Workspace
        id: workspace
        working-directory: ${{ inputs.workdir || github.workspace	}}
        run: terraform workspace select -or-create ${{ inputs.terraform_workspace }}

      - name: Terraform Validate
        id: validate
        working-directory: ${{ inputs.workdir || github.workspace	}}
        run: terraform validate

      - name: Terraform Plan with ArgoCD
        id: plan_argocd
        if: inputs.argocd_enabled
        env:
          ARGOCD_AUTH_TOKEN: ${{ fromJSON( steps.argocd_secrets.outputs.outputs ).ARGOCD_AUTH_TOKEN }}
        working-directory: ${{ inputs.workdir || github.workspace	}}
        run: terraform plan -out=tfplan -no-color -input=false ${{ inputs.terraform_args }}

      - name: Terraform Plan with ArgoCD
        id: plan
        if: ${{ !inputs.argocd_enabled }}
        working-directory: ${{ inputs.workdir || github.workspace	}}
        run: terraform plan -out=tfplan -no-color -input=false ${{ inputs.terraform_args }}

      - name: Terraform Apply
        if: ${{ inputs.terraform_check_only == false }}
        working-directory: ${{ inputs.workdir || github.workspace	}}
        run: terraform apply -auto-approve -input=false -parallelism=${{ inputs.terraform_parallelism }} tfplan

  infracost-prerequisites:
    name: "Infracost Prerequisites"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && inputs.infracost_enabled }}
    outputs:
      files_changed: ${{ steps.files_changed.outputs.terraform }}
      terraform_vars: ${{ steps.filter_args.outputs.filtered_args}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if .tf files changed
        id: files_changed
        uses: dorny/paths-filter@v3
        with:
          filters: |
            terraform:
              - '**.tf'
              - '**.tfvars'
      - name: Filter Terraform Args
        if: ${{ inputs.terraform_args }}
        id: filter_args
        run: |
          filtered_args=$(echo '${{ inputs.terraform_args }}' | sed -e 's/.*"\(.*\)".*/\1/')
          echo "filtered_args=$filtered_args" >> "$GITHUB_OUTPUT"
  infracost:
    name: "Run Infracost Workflow"
    needs: [infracost-prerequisites]
    if: ${{ github.event_name == 'pull_request' && needs.infracost-prerequisites.outputs.files_changed == 'true' && inputs.infracost_enabled }}
    uses: ZeroGachis/.github/.github/workflows/infra-cost.yml@v4
    with:
      infracost_terraform_workspace: ${{ inputs.infracost_terraform_workspace }}
      terraform_vars: ${{ needs.infracost-prerequisites.outputs.terraform_vars }}
    secrets: inherit
